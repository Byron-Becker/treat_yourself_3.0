This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-06T00:08:01.363Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
components/profile-view.tsx
hooks/use-profile.ts
layout.tsx
page.tsx
services/profile.service.ts
types/profile.types.ts

================================================================
Files
================================================================

================
File: components/profile-view.tsx
================
// src/features/user-profile/components/profile-view.tsx

import { useCallback } from 'react'
import { useProfile } from '../hooks/use-profile'
import { Button } from '@/components/ui/button'
import { userProfileService } from '../services/profile.service'

export function ProfileView() {
  console.log('üé® ProfileView component rendered')
  const { profile, loading, error, fetchProfile, updateProfile, user } = useProfile()

  console.log('üìä ProfileView state:', {
    hasProfile: !!profile,
    loading,
    hasError: !!error,
    hasUser: !!user
  })

  const handleCreateProfile = useCallback(async () => {
    console.log('üìù handleCreateProfile called')
    if (!user) {
      console.log('‚ö†Ô∏è No user available')
      return
    }

    try {
      console.log('üöÄ Creating profile for user')
      const token = await user.session?.getToken({ template: 'supabase' })
      if (!token) {
        console.error('‚ùå No token available')
        return
      }

      await userProfileService.createProfile({
        id: user.id,
        display_name: user.fullName || user.username || 'New User',
        email: user.primaryEmailAddress?.emailAddress || '',
        bio: '',
        avatar_url: user.imageUrl || '',
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
      }, token)
      
      console.log('‚úÖ Profile created, refreshing...')
      fetchProfile()
    } catch (err) {
      console.error('‚ùå Failed to create profile:', err)
    }
  }, [user, fetchProfile])

  const handleUpdateName = useCallback(async () => {
    console.log('‚úèÔ∏è handleUpdateName called')
    try {
      await updateProfile({
        display_name: 'New Name',
      })
    } catch {
      console.error('‚ùå Update failed')
    }
  }, [updateProfile])

  if (!user) {
    console.log('‚è≥ Waiting for user information')
    return <div>Loading user information...</div>
  }

  if (loading) {
    console.log('‚åõ Loading profile data')
    return <div>Loading profile...</div>
  }

  if (error) {
    console.log('‚ùå Rendering error state:', error)
    return (
      <div className="p-4 bg-red-50 border border-red-200 rounded-md">
        <h3 className="text-red-800 font-semibold">Error loading profile</h3>
        <p className="text-red-600">{error.message}</p>
        <p className="text-sm text-red-500 mt-2">User ID: {user.id}</p>
        <Button 
          onClick={fetchProfile}
          className="mt-4 bg-red-100 text-red-800 hover:bg-red-200"
        >
          Retry
        </Button>
      </div>
    )
  }

  if (!profile) {
    console.log('‚ûï Rendering create profile state')
    return (
      <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-md">
        <h3 className="text-yellow-800 font-semibold">No profile found</h3>
        <p className="text-sm text-yellow-600 mt-2">Would you like to create your profile?</p>
        <Button 
          onClick={handleCreateProfile}
          className="mt-4"
        >
          Create Profile
        </Button>
      </div>
    )
  }

  console.log('‚ú® Rendering profile view:', profile)
  return (
    <div className="p-4 space-y-4">
      <div>
        <h2 className="text-2xl font-bold">{profile.display_name}</h2>
        <p className="text-gray-600">{profile.email}</p>
        {profile.bio && <p className="mt-2">{profile.bio}</p>}
        <p className="text-sm text-gray-500 mt-2">User ID: {user.id}</p>
      </div>
      
      <Button onClick={handleUpdateName}>
        Update Name
      </Button>
    </div>
  )
}

================
File: hooks/use-profile.ts
================
// src/features/user-profile/hooks/use-profile.ts

import { useState, useCallback, useEffect, useRef, useMemo } from 'react'
import { useAuth, useUser } from '@clerk/nextjs'
import type { UserProfile, UpdateUserProfile } from '../types/profile.types'
import { userProfileService } from '../services/profile.service'
import { SupabaseError } from '@/lib/supabase/errors/supabase'
import { useErrorHandler } from '@/lib/errors/handlers'

export function useProfile() {
  console.log('üîÑ useProfile hook rendered')
  const isMounted = useRef(false)
  const fetchInProgress = useRef(false)
  const { userId, getToken } = useAuth()
  const { user } = useUser()
  const [profile, setProfile] = useState<UserProfile | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<SupabaseError | null>(null)
  const handleError = useErrorHandler()

  // Create stable references for auth state
  const authState = useMemo(() => ({
    userId,
    user,
    getToken
  }), [userId, user, getToken])

  console.log('üìä Current hook state:', { 
    userId: authState.userId,
    isMounted: isMounted.current,
    fetchInProgress: fetchInProgress.current,
    profile: !!profile,
    loading,
    error: !!error,
    hasUser: !!authState.user
  })

  const fetchProfile = useCallback(async () => {
    console.log('üîç fetchProfile called', { 
      userId: authState.userId,
      fetchInProgress: fetchInProgress.current,
      isMounted: isMounted.current
    })
    
    if (!authState.userId || fetchInProgress.current) {
      console.log('‚è≠Ô∏è Skipping fetch:', !authState.userId ? 'no userId' : 'fetch in progress')
      return
    }

    try {
      console.log('üöÄ Starting profile fetch...')
      fetchInProgress.current = true
      setLoading(true)
      setError(null)
      const token = await authState.getToken({ template: 'supabase' })
      const data = await userProfileService.getProfile(authState.userId, token)
      console.log('‚úÖ Profile data received:', data)
      if (isMounted.current) {
        console.log('üíæ Setting profile data')
        setProfile(data)
      } else {
        console.log('‚ö†Ô∏è Component unmounted, skipping profile update')
      }
    } catch (err) {
      console.error('‚ùå Error fetching profile:', err)
      if (isMounted.current) {
        const supabaseError = SupabaseError.fromError(err)
        setError(supabaseError)
        handleError(supabaseError)
      }
    } finally {
      if (isMounted.current) {
        console.log('üèÅ Setting loading to false')
        setLoading(false)
      }
      console.log('üîì Releasing fetch lock')
      fetchInProgress.current = false
    }
  }, [authState, handleError])

  const updateProfile = useCallback(async (updates: UpdateUserProfile) => {
    console.log('‚úèÔ∏è updateProfile called with:', updates)
    if (!authState.userId) return

    try {
      setLoading(true)
      setError(null)
      const token = await authState.getToken({ template: 'supabase' })
      const updated = await userProfileService.updateProfile(authState.userId, updates, token)
      console.log('‚úÖ Profile updated:', updated)
      if (isMounted.current) {
        setProfile(updated)
      }
      return updated
    } catch (err) {
      console.error('‚ùå Error updating profile:', err)
      const supabaseError = SupabaseError.fromError(err)
      if (isMounted.current) {
        setError(supabaseError)
        handleError(supabaseError)
      }
      throw supabaseError
    } finally {
      if (isMounted.current) {
        setLoading(false)
      }
    }
  }, [authState, handleError])

  useEffect(() => {
    console.log('üé£ Profile effect triggered', { 
      userId: authState.userId, 
      wasMounted: isMounted.current 
    })
    
    isMounted.current = true
    
    if (authState.userId && !profile && !error) {
      console.log('üë§ User ID present and no profile loaded, fetching profile')
      fetchProfile()
    }

    return () => {
      console.log('‚ôªÔ∏è Profile effect cleanup')
      isMounted.current = false
    }
  }, [authState.userId, profile, error, fetchProfile])

  return {
    profile,
    loading,
    error,
    fetchProfile,
    updateProfile,
    user: authState.user
  }
}

================
File: layout.tsx
================
// src/app/profile/page.tsx
'use client'

import { ProfileView } from './components/profile-view'


export default function ProfilePage() {
  return (
    <div className="max-w-2xl mx-auto">
      <ProfileView />
    </div>
  )
}

================
File: page.tsx
================
// src/app/(authenticated)/profile/page.tsx
'use client'

import { ProfileView } from './components/profile-view'


export default function ProfilePage() {
  return (
    <div className="max-w-2xl mx-auto">
      <ProfileView />
    </div>
  )
}

================
File: services/profile.service.ts
================
// src/features/user-profile/services/profile.service.ts

import { BaseService } from '@/lib/supabase/services/base'
import type { UserProfile, CreateUserProfile, UpdateUserProfile } from '../types/profile.types'

export class UserProfileService extends BaseService {
  private readonly table = 'user_profiles'

  async getProfile(userId: string, token?: string | null): Promise<UserProfile | null> {
    return this.withErrorHandling(async () => {
      const client = await this.getClient(token)
      const { data, error } = await client
        .from(this.table)
        .select('*')
        .eq('id', userId)
        .maybeSingle()
      
      if (error) throw error
      return data
    })
  }

  async createProfile(profile: CreateUserProfile & { id: string }, token?: string | null): Promise<UserProfile> {
    return this.withErrorHandling(async () => {
      const client = await this.getClient(token)

      const { data, error } = await client
        .from(this.table)
        .insert(profile)
        .select()
        .single()
      
      if (error) throw error
      return data
    })
  }

  async updateProfile(userId: string, updates: UpdateUserProfile, token?: string | null): Promise<UserProfile> {
    return this.withErrorHandling(async () => {
      const client = await this.getClient(token)
      const { data, error } = await client
        .from(this.table)
        .update({ ...updates, updated_at: new Date().toISOString() })
        .eq('id', userId)
        .select()
        .single()
      
      if (error) throw error
      return data
    })
  }
}

export const userProfileService = new UserProfileService()

================
File: types/profile.types.ts
================
// src/features/user-profile/types/profile.types.ts
// Basic interfaces for our domain model

export interface UserProfile {
    id: string               // Clerk user id
    display_name: string      
    email: string           // Clerk email
    bio?: string            // Optional in first iteration
    avatar_url?: string      // Optional in first iteration
    timezone?: string       // Optional in first iteration
    created_at: string
    updated_at: string
  }
  
  // For creating a new profile
  export type CreateUserProfile = Omit<UserProfile, 'id' | 'created_at' | 'updated_at'> 
  
  // For updating an existing profile
  export type UpdateUserProfile = Partial<Omit<UserProfile, 'id' | 'email' | 'created_at' | 'updated_at'>>
