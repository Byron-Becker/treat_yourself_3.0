This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-07T04:02:40.465Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
[lessonId]/components/image-error-boundary.tsx
[lessonId]/components/lesson-container.tsx
[lessonId]/components/lesson-header.tsx
[lessonId]/components/loading-overlay.tsx
[lessonId]/components/slides/info-bullet-slide.tsx
[lessonId]/components/slides/info-slide.tsx
[lessonId]/components/slides/question-slide.tsx
[lessonId]/layout.tsx
[lessonId]/page.tsx
data/exercise-content.ts
data/posture-content.ts
hooks/use-lesson-progress.ts
hooks/use-lesson.ts
hooks/use-slide-interaction.ts
hooks/use-viewport-scroll.ts
model/__tests__/lesson-progress.test.ts
model/__tests__/slide-interaction.test.ts
model/__tests__/viewport-state.test.ts
model/lesson-progress.ts
model/slide-interaction.ts
model/viewport-state.ts
services/lesson.service.ts
types/lesson.types.ts

================================================================
Files
================================================================

================
File: [lessonId]/components/image-error-boundary.tsx
================
// app/lessons/[lessonId]/components/image-error-boundary.tsx

'use client'

import React from 'react'
import { ImageOff } from 'lucide-react'
import { Button } from '@/components/ui/button'

interface Props {
  children: React.ReactNode
}

interface State {
  hasError: boolean
}

export class ImageErrorBoundary extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError() {
    return { hasError: true }
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="w-full h-full flex flex-col items-center justify-center gap-4 bg-muted rounded-lg p-8">
          <ImageOff className="h-12 w-12 text-muted-foreground" />
          <p className="text-sm text-muted-foreground">Failed to load image</p>
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => this.setState({ hasError: false })}
          >
            Retry
          </Button>
        </div>
      )
    }

    return this.props.children
  }
}

================
File: [lessonId]/components/lesson-container.tsx
================
// app/lessons/[lessonId]/components/lesson-container.tsx

'use client'

import { useLesson } from '../../hooks/use-lesson'
import { InfoSlide } from '../components/slides/info-slide'
import { QuestionSlide } from '../components/slides/question-slide'
import { InfoBulletSlide } from '../components/slides/info-bullet-slide'
import { LoadingOverlay } from '../components/loading-overlay'
import { cn } from '@/components/ui/utils'
import { memo } from 'react'
import type { Slide } from '../../types/lesson.types'

interface LessonContainerProps {
  lessonId: string
}

interface SlideWrapperProps {
  slide: Slide
  index: number
  currentIndex: number
  completedSlides: Set<string>
  interactionState: string
  handleAnswer: (optionId: string, correctOptionId: string) => void
  completeSlide: (slideId: string) => void
  scrollToSlide: (slideId: string) => void
  updateSlidePosition: (slideId: string, bounds: { top: number; bottom: number }) => void
}

const SlideWrapper = memo(function SlideWrapper({ 
  slide, 
  index,
  currentIndex,
  completedSlides,
  interactionState,
  handleAnswer,
  completeSlide,
  scrollToSlide,
  updateSlidePosition 
}: SlideWrapperProps) {
  return (
    <div 
      className="slide-item"
      ref={el => {
        if (el) {
          const bounds = el.getBoundingClientRect()
          updateSlidePosition(slide.id, {
            top: bounds.top,
            bottom: bounds.bottom
          })
        }
      }}
    >
      {slide.type === 'info' && (
        <InfoSlide
          content={slide}
          isActive={index === currentIndex}
          isCompleted={completedSlides.has(slide.id)}
          onComplete={() => {
            completeSlide(slide.id)
            scrollToSlide(slide.id)
          }}
        />
      )}

      {slide.type === 'question' && (
        <QuestionSlide
          content={slide}
          isActive={index === currentIndex}
          isCompleted={completedSlides.has(slide.id)}
          interactionState={interactionState}
          onAnswer={handleAnswer}
          onComplete={() => {
            completeSlide(slide.id)
            scrollToSlide(slide.id)
          }}
        />
      )}

      {slide.type === 'infoBullet' && (
        <InfoBulletSlide
          content={slide}
          isActive={index === currentIndex}
          isCompleted={completedSlides.has(slide.id)}
          onComplete={() => {
            completeSlide(slide.id)
            scrollToSlide(slide.id)
          }}
        />
      )}
    </div>
  )
})

export function LessonContainer({ lessonId }: LessonContainerProps) {
  const {
    lesson,
    visibleSlides,
    currentIndex,
    completedSlides,
    loading,
    interactionState,
    handleAnswer,
    completeSlide,
    scrollToSlide,
    updateSlidePosition
  } = useLesson(lessonId)

  if (!lesson) return null

  return (
    <main className={cn(
      "w-full max-w-2xl mx-auto",
      "space-y-6 py-6"
    )}>
      {loading && <LoadingOverlay />}

      {visibleSlides?.map((slide, index) => (
        <SlideWrapper
          key={slide.id}
          slide={slide}
          index={index}
          currentIndex={currentIndex}
          completedSlides={completedSlides}
          interactionState={interactionState}
          handleAnswer={handleAnswer}
          completeSlide={completeSlide}
          scrollToSlide={scrollToSlide}
          updateSlidePosition={updateSlidePosition}
        />
      ))}
    </main>
  )
}

================
File: [lessonId]/components/lesson-header.tsx
================
// app/lessons/[lessonId]/components/lesson-header.tsx

'use client'

import { ArrowLeft } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Progress } from '@/components/ui/progress'
import { useRouter } from 'next/navigation'
import { cn } from '@/components/ui/utils'

interface LessonHeaderProps {
 className?: string
}

export function LessonHeader({ className }: LessonHeaderProps) {
 const router = useRouter()

 return (
   <header className={cn(
     "bg-background/80 backdrop-blur-sm border-b",
     "px-4 py-3",
     className
   )}>
     <div className="flex items-center gap-4">
       <Button 
         variant="ghost" 
         size="icon"
         onClick={() => router.back()}
         className="shrink-0"
       >
         <ArrowLeft className="h-5 w-5" />
         <span className="sr-only">Go back</span>
       </Button>

       <div className="flex-1 min-w-0">
         <Progress 
           value={50} // Will come from lesson progress
           className="h-2" 
         />
       </div>

       <div className="shrink-0 text-sm font-medium">
         50% {/* Will come from lesson progress */}
       </div>
     </div>
   </header>
 )
}

================
File: [lessonId]/components/loading-overlay.tsx
================
// app/lessons/[lessonId]/components/loading-overlay.tsx

import { cn } from "@/components/ui/utils"

export function LoadingOverlay() {
    return (
      <div className={cn(
        "fixed inset-0 z-50",
        "bg-background/80 backdrop-blur-sm",
        "flex items-center justify-center"
      )}>
        <div className="space-y-4 text-center">
          <div className="animate-spin">
            {/* Loading spinner */}
          </div>
          <p className="text-sm text-muted-foreground">
            Loading...
          </p>
        </div>
      </div>
    )
  }

================
File: [lessonId]/components/slides/info-bullet-slide.tsx
================
// app/lessons/[lessonId]/components/slides/info-bullet-slide.tsx

'use client'

import { motion } from 'framer-motion'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { InfoBulletSlide as InfoBulletSlideType } from '../../../types/lesson.types'
import { cn } from '@/components/ui/utils'
import Image from 'next/image'
import { ImageErrorBoundary } from '../image-error-boundary'

interface InfoBulletSlideProps {
  content: InfoBulletSlideType
  isActive: boolean
  isCompleted: boolean
  onComplete: () => void
}

export function InfoBulletSlide({ 
  content, 
  isActive, 
  isCompleted, 
  onComplete 
}: InfoBulletSlideProps) {
  return (
    <Card className={cn(
      "overflow-hidden transition-all",
      isActive && "ring-2 ring-primary"
    )}>
      <motion.div 
        className="p-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        {content.imageUrl && (
          <motion.div 
            className="relative w-full h-[240px] mb-6"
            initial={{ scale: 0.95 }}
            animate={{ scale: 1 }}
          >
            <ImageErrorBoundary>
              <Image
                src={content.imageUrl}
                alt={content.title}
                fill
                className="object-cover rounded-lg"
                sizes="(max-width: 768px) 100vw, 768px"
              />
            </ImageErrorBoundary>
          </motion.div>
        )}

        <motion.h2 
          className="text-2xl font-bold mb-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
        >
          {content.title}
        </motion.h2>

        {content.introduction && (
          <motion.p 
            className="text-muted-foreground mb-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
          >
            {content.introduction}
          </motion.p>
        )}

        <motion.ul
          className="space-y-3 mb-6"
          initial="hidden"
          animate="visible"
          variants={{
            visible: {
              transition: { staggerChildren: 0.1 }
            }
          }}
        >
          {content.bullets.map((bullet, index) => (
            <motion.li
              key={index}
              className="flex gap-3 text-muted-foreground"
              variants={{
                hidden: { opacity: 0, x: -20 },
                visible: { opacity: 1, x: 0 }
              }}
            >
              <span className="text-primary">•</span>
              <span>{bullet.text}</span>
            </motion.li>
          ))}
        </motion.ul>

        {!isCompleted && (
          <motion.div 
            className="flex justify-end"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
          >
            <Button onClick={onComplete}>Continue</Button>
          </motion.div>
        )}
      </motion.div>
    </Card>
  )
}

================
File: [lessonId]/components/slides/info-slide.tsx
================
// app/lessons/[lessonId]/components/slides/info-slide.tsx

'use client'

import { motion } from 'framer-motion'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { ImageErrorBoundary } from '../image-error-boundary'
import { InfoSlide as InfoSlideType } from '../../../types/lesson.types'
import { cn } from '@/components/ui/utils'
import Image from 'next/image'


interface InfoSlideProps {
  content: InfoSlideType
  isActive: boolean
  isCompleted: boolean
  onComplete: () => void
}

export function InfoSlide({ content, isActive, isCompleted, onComplete }: InfoSlideProps) {
  return (
    <Card className={cn(
      "overflow-hidden transition-all",
      isActive && "ring-2 ring-primary"
    )}>
      <motion.div 
        className="p-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        {content.imageUrl && (
          <motion.div 
            className="relative w-full h-[240px] mb-6"
            initial={{ scale: 0.95 }}
            animate={{ scale: 1 }}
          >
            <ImageErrorBoundary>
              <Image
                src={content.imageUrl}
                alt={content.title}
                fill
                className="object-cover rounded-lg"
                sizes="(max-width: 768px) 100vw, 768px"
              />
            </ImageErrorBoundary>
          </motion.div>
        )}

        <motion.h2 
          className="text-2xl font-bold mb-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
        >
          {content.title}
        </motion.h2>

        <motion.p 
          className="text-muted-foreground mb-6"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
        >
          {content.body}
        </motion.p>

        {!isCompleted && (
          <motion.div 
            className="flex justify-end"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
          >
            <Button onClick={onComplete}>Continue</Button>
          </motion.div>
        )}
      </motion.div>
    </Card>
  )
}

================
File: [lessonId]/components/slides/question-slide.tsx
================
// app/lessons/[lessonId]/components/slides/question-slide.tsx

'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { QuestionSlide as QuestionSlideType } from '../../../types/lesson.types'
import { cn } from '@/components/ui/utils'
import Image from 'next/image'
import { ImageErrorBoundary } from '../image-error-boundary'

interface QuestionSlideProps {
  content: QuestionSlideType
  isActive: boolean
  isCompleted: boolean
  interactionState: string
  onAnswer: (optionId: string, correctOptionId: string) => void
  onComplete: () => void
}

export function QuestionSlide({ 
  content, 
  isActive, 
  isCompleted, 
  interactionState,
  onAnswer,
  onComplete 
}: QuestionSlideProps) {
  const [selectedId, setSelectedId] = useState<string | null>(null)

  const correctOption = content.options.find(opt => opt.isCorrect)
  const isCorrect = selectedId === correctOption?.id

  return (
    <Card className={cn(
      "overflow-hidden transition-all",
      isActive && "ring-2 ring-primary"
    )}>
      <motion.div 
        className="p-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        {content.imageUrl && (
          <motion.div 
            className="relative w-full h-[240px] mb-6"
            initial={{ scale: 0.95 }}
            animate={{ scale: 1 }}
          >
            <ImageErrorBoundary>
              <Image
                src={content.imageUrl}
                alt=""
                fill
                className="object-cover rounded-lg"
                sizes="(max-width: 768px) 100vw, 768px"
              />
            </ImageErrorBoundary>
          </motion.div>
        )}

        <motion.h2 
          className="text-xl font-semibold mb-6"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
        >
          {content.question}
        </motion.h2>

        <div className="space-y-3 mb-6">
          {content.options.map((option) => (
            <motion.button
              key={option.id}
              onClick={() => !isCompleted && setSelectedId(option.id)}
              className={cn(
                "w-full p-4 rounded-lg border-2 text-left transition-colors",
                selectedId === option.id && "border-primary bg-primary/5",
                isCompleted && option.isCorrect && "border-green-500 bg-green-50",
                isCompleted && !option.isCorrect && selectedId === option.id && "border-red-500 bg-red-50"
              )}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
            >
              {option.text}
            </motion.button>
          ))}
        </div>

        <AnimatePresence mode="wait">
          {!isCompleted ? (
            <motion.div
              className="flex justify-end"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <Button 
                onClick={() => {
                  if (selectedId && correctOption) {
                    onAnswer(selectedId, correctOption.id)
                  }
                }}
                disabled={!selectedId}
              >
                Check Answer
              </Button>
            </motion.div>
          ) : (
            <motion.div
              className="space-y-4"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
            >
              {content.explanation && (
                <div className="bg-muted p-4 rounded-lg">
                  {content.explanation}
                </div>
              )}
              <div className="flex justify-end">
                <Button onClick={onComplete}>Continue</Button>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>
    </Card>
  )
}

================
File: [lessonId]/layout.tsx
================
// app/lessons/[lessonId]/layout.tsx

'use client'

import { LessonHeader } from './components/lesson-header'
import { cn } from '@/components/ui/utils'

interface LessonLayoutProps {
 children: React.ReactNode
}

export default function LessonLayout({ children }: LessonLayoutProps) {
 return (
   <div className={cn(
     "min-h-[100dvh] flex flex-col",
     "bg-background"
   )}>
     <LessonHeader className="flex-none sticky top-0 z-50" />
     
     <main className={cn(
       "flex-1 relative",
       "px-4 sm:px-6 lg:px-8",
       "pt-safe-offset-top pb-safe-offset-bottom"
     )}>
       {children}
     </main>
   </div>
 )
}

================
File: [lessonId]/page.tsx
================
// app/lessons/[lessonId]/page.tsx

import { ErrorBoundary } from '@/components/error-boundary'
import { LessonContainer } from './components/lesson-container'


interface PageProps {
  params: {
    lessonId: string
  }
}

export default function LessonPage({ params }: PageProps) {
  return (
    <ErrorBoundary>
      <LessonContainer lessonId={params.lessonId} />
    </ErrorBoundary>
  )
}

================
File: data/exercise-content.ts
================
// pacing-lesson.ts
export const exerciseLessonContent = [
    {
      id: '1',
      type: 'info',
      title: 'What\'s the goal of these exercises?',
      body: 'These exercises are not for strengthening-- they are diagnostic tools to guide your recovery.',
      imageUrl: '/proneonelbows.png'
    },
    {
      id: '2',
      type: 'info',
      title: 'Creating The Right Environment',
      body: 'Stop any existing exercises you are currently doing for your low back.  This will help us more clearly determine which exercises are helping or hurting your condition.',
      imageUrl: '/longterm.png'
    },
    {
      id: '3',

      type: 'infoBullet',
      title: 'Understanding Your Exercise Response',
      introduction: 'Several key responses to pay attention to with the exercises:',
      bullets: [
        { text: 'Your pain may appear then gradually diminish' },
        { text: 'Your movement may improve with repetition' },
        { text: 'Your symptoms can increase or decrease' },
        { text: 'Your pain location may change or shift' }
      ],
      imageUrl: '/derangement.png'
    },
    {
      id: '4',
      type: 'infoBullet',
      title: 'What is Centralization?',
      introduction: 'Centralization is the movement of your pain to a more central location:',
      bullets: [
        { text: 'It is the best indicator of recovery' },
        { text: 'Exercises that centralize are the correct movements' },
        { text: 'Exercises that move pain away from the low back are the wrong movements' },
        { text: 'Let the exercises that centralize your pain guide you' }
      ],
      imageUrl: '/centralize.png'
    },

    {
      id: '5',
      type: 'question',
      question: 'Is the pain centralizing?',
      options: [
        { id: '1', text: 'No, the symptoms are moving away from the low back.', isCorrect: true },
        { id: '2', text: 'No, the symptoms are staying the same.', isCorrect: false },
        { id: '3', text: 'Yes, the symptoms move from the back of the thigh to the low back.', isCorrect: false }
      ],
      explanation: 'Remember, centralization is the movement of your pain to a more central location. If your pain is moving away from the low back, it is worsening.',
      imageUrl: '/beforeafter.png'
    },
    {
      id: '6',
      type: 'infoBullet',
      title: 'What is Directional Preference?',
      introduction: 'It\'s the movement direction that improves or centralizes your symptoms:',
      bullets: [
        { text: 'Most common direction is extension (backward bending)' },
        { text: 'Up to 70% of people exhibit a directional preference' },
        { text: 'Using repeated movements in the same direction can help determine the correct direction' },
        { text: 'The exercise module ahead will help guide you to find your directional preference' }
      ],
      imageUrl: '/standflexext.png'
      
    },
    {
      id: '7',
      type: 'question',
      question: 'A person has pain in their lower back and right hip. After performing 10 repetitions of forward bends (flexion), their symptoms have spread to include their lower back, right hip, and right calf. Is flexion their directional preference?',
      options: [
        { id: '1', text: 'Yes, their symptoms are centralizing', isCorrect: false },
        { id: '2', text: 'No, their symptoms are moving away from the low back.', isCorrect: true },
        { id: '3', text: 'Not enough information to determine', isCorrect: false }
      ],
      explanation: 'The answer is no.  The patient symptoms have moved further down into the calf.  This is the opposite of centralization, and tells us that we do not want to continue in that direction.  Remember:  If symptoms move away from the spine, pain intensity increases and remains worse, and/or your range of movement decreases,  you should discontinue the movement in that direction.',
      imageUrl: '/beforeaftercalf.png'
    },

    {
      id: '8',
      type: 'question',
      question: 'The same person now has pain in their low back, right hip, and right calf. After performing 10 repetitions of backward bends (extension), their symptoms are now in the low back and the right hip. Is extension their directional preference?',
      options: [
        { id: '1', text: 'Yes, their symptoms are centralizing', isCorrect: true },
        { id: '2', text: 'No, their symptoms are moving away from the low back.', isCorrect: false },
        { id: '3', text: 'Not enough information to determine', isCorrect: false }
      ],
      explanation: 'The answer is yes!  The right calf no longer has any symptoms, and the pain is back to the original location of the low back and right hip.  This is a centralizing response.  They should continue with extension.',
      imageUrl: '/afterbeforecalf.png'
    },
    {
      id: '9',
      type: 'info',
      title: 'Last but not least...',
      body: 'We understand that was a lot. Feel free to scroll up and review any of the principles we went over. The next module will help guide you through a series of exercises to help you find your directional preference.',
      imageUrl: '/sphinx-pose.png',
      nextRoute: '/exercise-progression/1'
    }
  ]

================
File: data/posture-content.ts
================
// posture-lesson.ts
export const postureLessonContent = [
    {
      id: '1',
      type: 'info',
      title: 'Understanding Posture',
      body: 'Good posture is essential for reducing strain on your body and preventing pain. In this lesson, we\'ll explore what makes good posture and how to maintain it throughout your day.',
      imageUrl: '/goodbadposture.png'
    },
    {
      id: '2',
      type: 'info',
      title: 'The Spine\'s Natural Curves',
      body: 'Your spine has natural curves that help distribute weight and absorb shock. Maintaining these curves while sitting and standing is key to good posture.',
      imageUrl: '/lumbar-good.png'
    },
    {
      id: '3',
      type: 'question',
      question: 'Which of these is a sign of poor posture?',
      options: [
        { id: '1', text: 'Rounded shoulders and forward head position', isCorrect: true },
        { id: '2', text: 'Ears aligned with shoulders when viewed from the side', isCorrect: false },
        { id: '3', text: 'Natural curve in lower back', isCorrect: false }
      ],
      explanation: 'Rounded shoulders and forward head position put extra strain on your neck and upper back muscles. This posture often develops from prolonged computer use or phone viewing.',
      imageUrl: '/posture-good.png'
    },
    {
      id: '4',
      type: 'info',
      title: 'Common Posture Mistakes',
      body: 'Many daily activities can lead to poor posture. Looking down at phones, slouching at desks, and carrying heavy bags on one shoulder are common culprits.',
      imageUrl: '/slouchposture.png'
    },
    {
      id: '5',
      type: 'question',
      question: 'What is the best way to check your standing posture?',
      options: [
        { id: '1', text: 'Stand with your back against a wall, with head, shoulders, and hips touching', isCorrect: true },
        { id: '2', text: 'Look in the mirror while standing normally', isCorrect: false },
        { id: '3', text: 'Ask someone to take a photo of you', isCorrect: false }
      ],
      explanation: 'The wall check provides consistent reference points for alignment. Your head, shoulder blades, and buttocks should touch the wall, with feet about 4 inches from the wall.',
      imageUrl: ''
    }
  ]

================
File: hooks/use-lesson-progress.ts
================
// features/lessons/hooks/use-lesson-progress.ts

import { useState, useCallback, useEffect } from 'react'
import { useAuth } from '@clerk/nextjs'
import { LessonProgress } from '../model/lesson-progress'
import type { Lesson } from '../types/lesson.types'
import { exerciseLessonContent } from '../data/exercise-content'
import { postureLessonContent } from '../data/posture-content'

export function useLessonProgress(lessonId?: string) {
  const { userId } = useAuth()
  const [lesson, setLesson] = useState<Lesson | null>(null)
  const [progressModel] = useState(() => new LessonProgress())
  const [loading, setLoading] = useState(false)

  // Load static lesson content based on lessonId
  useEffect(() => {
    async function loadLesson() {
      try {
        setLoading(true)
        
        // Use static content based on lessonId
        const slides = lessonId === 'exercise-lesson' 
          ? exerciseLessonContent 
          : lessonId === 'posture-lesson'
            ? postureLessonContent
            : []

        if (slides.length > 0) {
          const lessonData: Lesson = {
            id: lessonId || 'default',
            title: lessonId === 'exercise-lesson' ? 'Exercise Lesson' : 'Posture Lesson',
            slides,
            progress: 0,
            currentSlideIndex: 0,
            completedSlideIds: [],
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            userId: userId || 'anonymous'
          }
          setLesson(lessonData)
        }
      } catch (error) {
        console.error('Error loading lesson:', error)
      } finally {
        setLoading(false)
      }
    }

    loadLesson()
  }, [lessonId, userId])

  const completeSlide = useCallback(async (slideId: string) => {
    if (!lesson) return

    try {
      setLoading(true)
      progressModel.completeSlide(slideId, lesson.slides.length)
      
      // Update local lesson state
      setLesson(prev => {
        if (!prev) return null
        return {
          ...prev,
          completedSlideIds: [...prev.completedSlideIds, slideId],
          progress: progressModel.getProgress()
        }
      })
    } finally {
      setLoading(false)
    }
  }, [lesson, progressModel])

  return {
    lesson,
    progress: progressModel.getProgress(),
    completedSlides: new Set(lesson?.completedSlideIds || []),
    currentIndex: progressModel.getCurrentIndex(),
    loading,
    completeSlide
  }
}

================
File: hooks/use-lesson.ts
================
// features/lessons/hooks/use-lesson.ts

import { useLessonProgress } from './use-lesson-progress'
import { useSlideInteraction } from './use-slide-interaction'
import { useViewportScroll } from './use-viewport-scroll'
import { useMemo } from 'react'

export function useLesson(lessonId?: string) {
  const {
    lesson,
    progress,
    completedSlides,
    currentIndex,
    loading,
    completeSlide
  } = useLessonProgress(lessonId)

  const {
    state: interactionState,
    selectedOption,
    isCorrect,
    hasReviewed,
    canSubmit,
    canViewExplanation,
    handleAnswer,
    showExplanationPanel,
    reset: resetInteraction
  } = useSlideInteraction()

  const {
    updateSlidePosition,
    scrollToSlide,
    activeSlideId,
    lastScrollPosition
  } = useViewportScroll()

  // Calculate visible slides based on lesson data and current index
  const visibleSlides = useMemo(() => {
    if (!lesson?.slides) return []
    // Only show current slide
    return lesson.slides.slice(0, currentIndex + 1)
  }, [lesson?.slides, currentIndex])

  return {
    // Lesson Progress
    lesson,
    visibleSlides,
    progress,
    completedSlides,
    currentIndex,
    loading,
    completeSlide,

    // Interaction State  
    interactionState,
    selectedOption,
    isCorrect,
    hasReviewed,
    canSubmit,
    canViewExplanation,
    handleAnswer,
    showExplanationPanel,
    resetInteraction,

    // Viewport/Scroll
    updateSlidePosition,
    scrollToSlide,
    activeSlideId,
    lastScrollPosition
  }
}

================
File: hooks/use-slide-interaction.ts
================
// features/lessons/hooks/use-slide-interaction.ts

import { useState, useCallback } from 'react'
import { SlideInteraction } from '../model/slide-interaction'

export function useSlideInteraction() {
  const [interactionModel] = useState(() => new SlideInteraction())

  const handleAnswer = useCallback((optionId: string, correctOptionId: string) => {
    interactionModel.selectOption(optionId)
    interactionModel.submit(correctOptionId)
  }, [interactionModel])

  const showExplanationPanel = useCallback(() => {
    interactionModel.viewExplanation()
  }, [interactionModel])

  const reset = useCallback(() => {
    interactionModel.reset()
  }, [interactionModel])

  return {
    state: interactionModel.getState(),
    selectedOption: interactionModel.getSelectedOption(),
    isCorrect: interactionModel.isAnswerCorrect(),
    hasReviewed: interactionModel.hasReviewed(),
    canSubmit: interactionModel.canSubmit(),
    canViewExplanation: interactionModel.canViewExplanation(),
    handleAnswer,
    showExplanationPanel,
    reset
  }
}

================
File: hooks/use-viewport-scroll.ts
================
// features/lessons/hooks/use-viewport-scroll.ts

import { useState, useCallback } from 'react'
import { ViewportState } from '../model/viewport-state'

export function useViewportScroll() {
  const [viewportModel] = useState(() => new ViewportState())

  const updateSlidePosition = useCallback((
    slideId: string, 
    bounds: { top: number; bottom: number }
  ) => {
    viewportModel.updateSlidePosition(slideId, bounds)
  }, [viewportModel])

  const scrollToSlide = useCallback((slideId: string) => {
    const bounds = viewportModel.getSlideBounds(slideId)
    if (!bounds) return

    const scrollPosition = bounds.top
    viewportModel.recordScrollPosition(scrollPosition)
    
    window.scrollTo({
      top: Math.max(0, scrollPosition),
      behavior: 'smooth'
    })
  }, [viewportModel])

  return {
    updateSlidePosition,
    scrollToSlide,
    activeSlideId: viewportModel.getActiveSlideId(),
    lastScrollPosition: viewportModel.getLastScrollPosition()
  }
}

================
File: model/__tests__/lesson-progress.test.ts
================
// features/lessons/model/__tests__/lesson-progress.test.ts

import { LessonProgress } from '../lesson-progress'

describe('LessonProgress', () => {
  let progress: LessonProgress

  beforeEach(() => {
    // Fresh instance before each test
    progress = new LessonProgress()
  })

  describe('Lesson State', () => {
    test('should initialize with correct starting values', () => {
      expect(progress.getCurrentIndex()).toBe(0)
      expect(progress.getProgress()).toBe(0)
      expect(progress.isLessonComplete()).toBe(false)
      expect(progress.getCompletedSlides()).toHaveLength(0)
    })

    test('should track completed status correctly', () => {
      // Complete all slides in a 2-slide lesson
      progress.completeSlide('slide1', 2)
      progress.completeSlide('slide2', 2)
      
      expect(progress.isLessonComplete()).toBe(true)
      expect(progress.getProgress()).toBe(100)
    })
  })

  describe('Slide Completion', () => {
    test('should only count each slide once', () => {
      progress.completeSlide('slide1', 4)
      progress.completeSlide('slide1', 4)
      
      expect(progress.getProgress()).toBe(25) // Only counted once
    })

    test('should calculate progress correctly', () => {
      progress.completeSlide('slide1', 4)
      expect(progress.getProgress()).toBe(25)
      
      progress.completeSlide('slide2', 4)
      expect(progress.getProgress()).toBe(50)
    })
  })

  describe('Navigation', () => {
    test('should not advance beyond total slides', () => {
      expect(progress.canAdvance(1)).toBe(false)
    })

    test('should advance when possible', () => {
      expect(progress.canAdvance(2)).toBe(true)
      progress.advanceSlide(2)
      expect(progress.getCurrentIndex()).toBe(1)
    })

    test('should track current position correctly', () => {
      progress.advanceSlide(3)
      expect(progress.getCurrentIndex()).toBe(1)
      
      progress.advanceSlide(3)
      expect(progress.getCurrentIndex()).toBe(2)
    })
  })
})

================
File: model/__tests__/slide-interaction.test.ts
================
// features/lessons/model/__tests__/slide-interaction.test.ts

import { SlideInteraction } from '../slide-interaction'

describe('SlideInteraction', () => {
  let interaction: SlideInteraction

  beforeEach(() => {
    interaction = new SlideInteraction()
  })

  describe('State Management', () => {
    test('should initialize in viewing state', () => {
      expect(interaction.getState()).toBe('viewing')
      expect(interaction.getSelectedOption()).toBeNull()
      expect(interaction.isAnswerCorrect()).toBeNull()
    })

    test('should transition through states correctly', () => {
      interaction.startAnswering()
      expect(interaction.getState()).toBe('answering')

      interaction.selectOption('option1')
      interaction.submit('option1')
      expect(interaction.getState()).toBe('reviewing')
    })
  })

  describe('Answer Handling', () => {
    test('should handle correct answer', () => {
      interaction.startAnswering()
      interaction.selectOption('correct')
      interaction.submit('correct')
      
      expect(interaction.isAnswerCorrect()).toBe(true)
    })

    test('should handle incorrect answer', () => {
      interaction.startAnswering()
      interaction.selectOption('wrong')
      interaction.submit('correct')
      
      expect(interaction.isAnswerCorrect()).toBe(false)
    })
  })

  describe('Explanation Viewing', () => {
    test('should track explanation state', () => {
      expect(interaction.hasReviewed()).toBe(false)
      
      interaction.viewExplanation()
      expect(interaction.hasReviewed()).toBe(true)
      expect(interaction.getState()).toBe('explaining')
    })
  })

  describe('Reset Functionality', () => {
    test('should reset to initial answering state', () => {
      interaction.selectOption('option1')
      interaction.submit('correct')
      interaction.reset()

      expect(interaction.getState()).toBe('answering')
      expect(interaction.getSelectedOption()).toBeNull()
      expect(interaction.isAnswerCorrect()).toBeNull()
    })
  })
})

================
File: model/__tests__/viewport-state.test.ts
================
// features/lessons/model/__tests__/viewport-state.test.ts

import { ViewportState } from '../viewport-state'

describe('ViewportState', () => {
  let viewport: ViewportState

  beforeEach(() => {
    viewport = new ViewportState()
  })

  describe('Slide Position Tracking', () => {
    test('should track slide positions', () => {
      viewport.updateSlidePosition('slide1', { top: 0, bottom: 100 })
      expect(viewport.getSlideBounds('slide1')).toEqual({ top: 0, bottom: 100 })
    })

    test('should determine if slide is visible', () => {
      viewport.updateSlidePosition('slide1', { top: 50, bottom: 150 })
      
      expect(viewport.isSlideVisible('slide1', { top: 0, bottom: 100 })).toBe(true)
      expect(viewport.isSlideVisible('slide1', { top: 200, bottom: 300 })).toBe(false)
    })
  })

  describe('Active Slide Management', () => {
    test('should track active slide', () => {
      viewport.setActiveSlide('slide1')
      expect(viewport.getActiveSlideId()).toBe('slide1')
    })
  })

  describe('Scroll Position', () => {
    test('should record and retrieve scroll position', () => {
      viewport.recordScrollPosition(100)
      expect(viewport.getLastScrollPosition()).toBe(100)
    })
  })
})

================
File: model/lesson-progress.ts
================
// features/lessons/model/lesson-progress.ts

interface LessonProgressState {
    currentSlideIndex: number
    completedSlideIds: Set<string>
    progress: number
    isStarted: boolean
    isCompleted: boolean
  }
  
  export class LessonProgress {
    private state: LessonProgressState
  
    constructor(initial?: Partial<LessonProgressState>) {
      this.state = {
        currentSlideIndex: initial?.currentSlideIndex ?? 0,
        completedSlideIds: new Set(initial?.completedSlideIds),
        progress: initial?.progress ?? 0,
        isStarted: initial?.isStarted ?? false,
        isCompleted: initial?.isCompleted ?? false
      }
    }
  
    completeSlide(slideId: string, totalSlides: number): void {
      this.state.completedSlideIds.add(slideId)
      this.state.progress = (this.state.completedSlideIds.size / totalSlides) * 100
      
      // Advance to next slide if not at the end
      if (this.state.currentSlideIndex < totalSlides - 1) {
        this.state.currentSlideIndex++
      }
      
      if (this.state.progress === 100) {
        this.state.isCompleted = true
      }
    }
  
    startLesson(): void {
      if (!this.state.isStarted) {
        this.state.isStarted = true
        this.state.currentSlideIndex = 0
      }
    }
  
    advanceSlide(totalSlides: number): boolean {
      if (this.canAdvance(totalSlides)) {
        this.state.currentSlideIndex++
        return true
      }
      return false
    }
  
    canAdvance(totalSlides: number): boolean {
      return this.state.currentSlideIndex < totalSlides - 1
    }
  
    isSlideCompleted(slideId: string): boolean {
      return this.state.completedSlideIds.has(slideId)
    }
  
    getProgress(): number {
      return this.state.progress
    }
  
    getCurrentIndex(): number {
      return this.state.currentSlideIndex
    }
  
    getCompletedSlides(): string[] {
      return Array.from(this.state.completedSlideIds)
    }
  
    isLessonComplete(): boolean {
      return this.state.isCompleted
    }
  
    toJSON() {
      return {
        currentSlideIndex: this.state.currentSlideIndex,
        completedSlideIds: Array.from(this.state.completedSlideIds),
        progress: this.state.progress,
        isStarted: this.state.isStarted,
        isCompleted: this.state.isCompleted
      }
    }
  }

================
File: model/slide-interaction.ts
================
// features/lessons/model/slide-interaction.ts

export type InteractionState = 'viewing' | 'answering' | 'reviewing' | 'explaining'

interface SlideInteractionState {
 state: InteractionState
 selectedOptionId: string | null
 hasSubmitted: boolean 
 hasViewedExplanation: boolean
 isCorrect: boolean | null
}

export class SlideInteraction {
 private state: SlideInteractionState

 constructor(initial?: Partial<SlideInteractionState>) {
   this.state = {
     state: initial?.state ?? 'viewing',
     selectedOptionId: initial?.selectedOptionId ?? null,
     hasSubmitted: initial?.hasSubmitted ?? false,
     hasViewedExplanation: initial?.hasViewedExplanation ?? false,
     isCorrect: initial?.isCorrect ?? null
   }
 }

 selectOption(optionId: string): void {
   if (this.state.state === 'answering') {
     this.state.selectedOptionId = optionId
   }
 }

 submit(correctOptionId: string): void {
   if (!this.state.selectedOptionId) return

   this.state.hasSubmitted = true
   this.state.isCorrect = this.state.selectedOptionId === correctOptionId
   this.state.state = 'reviewing'
 }

 startAnswering(): void {
   this.state.state = 'answering'
 }

 viewExplanation(): void {
   this.state.state = 'explaining'
   this.state.hasViewedExplanation = true
 }

 reset(): void {
   this.state.state = 'answering'
   this.state.selectedOptionId = null
   this.state.hasSubmitted = false
   this.state.isCorrect = null
 }

 canSubmit(): boolean {
   return !!this.state.selectedOptionId && !this.state.hasSubmitted
 }

 canViewExplanation(): boolean {
   return this.state.hasSubmitted && !this.state.hasViewedExplanation
 }
 
 getState(): InteractionState {
   return this.state.state
 }

 getSelectedOption(): string | null {
   return this.state.selectedOptionId
 }

 isAnswerCorrect(): boolean | null {
   return this.state.isCorrect
 }

 hasReviewed(): boolean {
   return this.state.hasViewedExplanation
 }

 toJSON() {
   return { ...this.state }
 }
}

================
File: model/viewport-state.ts
================
// features/lessons/model/viewport-state.ts

interface ViewportBounds {
    top: number
    bottom: number
   }
   
   interface SlidePosition {
    slideId: string
    bounds: ViewportBounds
    isActive: boolean
   }
   
   export class ViewportState {
    private slidePositions: Map<string, SlidePosition>
    private activeSlideId: string | null
    private lastScrollPosition: number
   
    constructor() {
      this.slidePositions = new Map()
      this.activeSlideId = null
      this.lastScrollPosition = 0
    }
   
    updateSlidePosition(slideId: string, bounds: ViewportBounds): void {
      this.slidePositions.set(slideId, {
        slideId,
        bounds,
        isActive: false
      })
    }
   
    setActiveSlide(slideId: string): void {
      this.activeSlideId = slideId
      this.slidePositions.forEach(position => {
        position.isActive = position.slideId === slideId
      })
    }
   
    isSlideVisible(slideId: string, viewportBounds: ViewportBounds): boolean {
      const position = this.slidePositions.get(slideId)
      if (!position) return false
   
      return (
        position.bounds.bottom >= viewportBounds.top && 
        position.bounds.top <= viewportBounds.bottom
      )
    }
   
    recordScrollPosition(position: number): void {
      this.lastScrollPosition = position
    }
   
    getLastScrollPosition(): number {
      return this.lastScrollPosition
    }
   
    getActiveSlideId(): string | null {
      return this.activeSlideId
    }
   
    getSlideBounds(slideId: string): ViewportBounds | null {
      return this.slidePositions.get(slideId)?.bounds ?? null
    }
   
    toJSON() {
      return {
        positions: Array.from(this.slidePositions.entries()),
        activeSlideId: this.activeSlideId,
        lastScrollPosition: this.lastScrollPosition
      }
    }
   }

================
File: services/lesson.service.ts
================
// features/lessons/services/lesson.service.ts

import { BaseService } from '@/lib/supabase/services/base'
import type { Lesson, CreateLesson, UpdateLesson } from '../types/lesson.types'

export class LessonService extends BaseService {
  private readonly table = 'lessons'

  async getLesson(lessonId: string, token?: string | null): Promise<Lesson | null> {
    return this.withErrorHandling(async () => {
      const client = await this.getClient(token)
      const { data, error } = await client
        .from(this.table)
        .select('*')
        .eq('id', lessonId)
        .maybeSingle()
      
      if (error) throw error
      return data
    })
  }

  async getLessonProgress(userId: string, lessonId: string, token?: string | null): Promise<Lesson | null> {
    return this.withErrorHandling(async () => {
      const client = await this.getClient(token)
      const { data, error } = await client
        .from(this.table)
        .select('*')
        .eq('id', lessonId)
        .eq('user_id', userId)
        .maybeSingle()

      if (error) throw error
      return data
    })
  }

  async createLessonProgress(lesson: CreateLesson, token?: string | null): Promise<Lesson> {
    return this.withErrorHandling(async () => {
      const client = await this.getClient(token)

      // Get the user_id from the JWT claims
      const { data: claims, error: claimsError } = await client.rpc('requesting_user_id')
      if (claimsError) throw claimsError
      if (!claims) throw new Error('No user ID found in JWT claims')

      const { data, error } = await client
        .from(this.table)
        .insert({ ...lesson, user_id: claims })
        .select()
        .single()
      
      if (error) throw error
      return data
    })
  }

  async updateLessonProgress(
    lessonId: string, 
    updates: UpdateLesson, 
    token?: string | null
  ): Promise<Lesson> {
    return this.withErrorHandling(async () => {
      const client = await this.getClient(token)
      const { data, error } = await client
        .from(this.table)
        .update({ 
          ...updates, 
          updated_at: new Date().toISOString() 
        })
        .eq('id', lessonId)
        .select()
        .single()
      
      if (error) throw error
      return data
    })
  }

  async completeSlide(
    lessonId: string,
    slideId: string,
    token?: string | null
  ): Promise<Lesson> {
    return this.withErrorHandling(async () => {
      const client = await this.getClient(token)
      
      // First get the current lesson to update completed slides
      const { data: currentLesson, error: fetchError } = await client
        .from(this.table)
        .select('*')
        .eq('id', lessonId)
        .single()

      if (fetchError) throw fetchError

      const completedSlideIds = new Set([
        ...currentLesson.completedSlideIds,
        slideId
      ])

      // Calculate new progress
      const totalSlides = currentLesson.slides.length
      const progress = (completedSlideIds.size / totalSlides) * 100

      // Update the lesson
      const { data, error } = await client
        .from(this.table)
        .update({
          completedSlideIds: Array.from(completedSlideIds),
          progress,
          updated_at: new Date().toISOString()
        })
        .eq('id', lessonId)
        .select()
        .single()

      if (error) throw error
      return data
    })
  }
}

export const lessonService = new LessonService()

================
File: types/lesson.types.ts
================
// features/lessons/types/lesson.types.ts

export interface BaseSlide {
    id: string
    type: SlideType
    nextRoute?: string
  }
  
  export type SlideType = 'info' | 'question' | 'infoBullet'
  
  export interface InfoSlide extends BaseSlide {
    type: 'info'
    title: string
    body: string
    imageUrl?: string
  }
  
  export interface QuestionSlide extends BaseSlide {
    type: 'question'
    question: string
    options: QuestionOption[]
    explanation?: string
    imageUrl?: string
  }
  
  export interface InfoBulletSlide extends BaseSlide {
    type: 'infoBullet'
    title: string
    introduction?: string
    bullets: BulletPoint[]
    imageUrl?: string
  }
  
  export interface QuestionOption {
    id: string
    text: string
    isCorrect: boolean
  }
  
  export interface BulletPoint {
    text: string
  }
  
  export type Slide = InfoSlide | QuestionSlide | InfoBulletSlide
  
  export interface Lesson {
    id: string
    title: string
    description?: string
    slides: Slide[]
    progress: number
    currentSlideIndex: number
    completedSlideIds: string[]
    createdAt: string
    updatedAt: string
    userId: string
  }
  
  export type CreateLesson = Omit<Lesson, 'id' | 'createdAt' | 'updatedAt'>
  export type UpdateLesson = Partial<Omit<Lesson, 'id' | 'userId' | 'createdAt' | 'updatedAt'>>
