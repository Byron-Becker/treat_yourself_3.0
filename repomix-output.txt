This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-06T19:34:24.262Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
use-lesson-navigation.ts
use-lesson-progress.ts
use-lesson.ts
use-slide-interaction.ts
use-slide-scroll.ts

================================================================
Files
================================================================

================
File: use-lesson-navigation.ts
================
// hooks/use-lesson-navigation.ts

import { useState, useCallback } from "react"
import type { Slide } from "../types/lesson.types"

export function useLessonNavigation(slides: Slide[] = []) {

    const [currentIndex, setCurrentIndex] = useState(0)
    const [visibleSlides, setVisibleSlides] = useState<Slide[]>([])
  
    const showNextSlide = useCallback(() => {
      const nextIndex = currentIndex + 1
      if (nextIndex < slides.length) {
        setCurrentIndex(nextIndex)
        setVisibleSlides(slides.slice(0, nextIndex + 1))
      }
    }, [currentIndex, slides])
  
    return {
      currentIndex,
      visibleSlides,
      showNextSlide,
    }
  }

================
File: use-lesson-progress.ts
================
// hooks/use-lesson-progress.ts

import { useState, useCallback } from 'react'
import { useAuth } from '@clerk/nextjs'
import type { Lesson } from '../types/lesson.types'
import { lessonService } from '../services/lesson.service'


export function useLessonProgress() {
  const { userId, getToken } = useAuth()
  const [lesson, setLesson] = useState<Lesson | null>(null)
  const [completedSlides, setCompletedSlides] = useState<Set<string>>(new Set())
  const [loading, setLoading] = useState(false)

  const completeSlide = useCallback(async (slideId: string) => {
    if (!userId || !lesson) return

    try {
      setLoading(true)
      const token = await getToken({ template: 'supabase' })
      const updatedLesson = await lessonService.completeSlide(lesson.id, slideId, token)
      setLesson(updatedLesson)
      setCompletedSlides(new Set(updatedLesson.completedSlideIds))
    } finally {
      setLoading(false) 
    }
  }, [userId, lesson, getToken])

  return {
    lesson,
    completedSlides,
    loading,
    completeSlide
  }
}

================
File: use-lesson.ts
================
import { useLessonNavigation } from "./use-lesson-navigation"
import { useLessonProgress } from "./use-lesson-progress"
import { useSlideInteraction } from "./use-slide-interaction"
import { useSlideScroll } from "./use-slide-scroll"

// hooks/use-lesson.ts (composition hook)
export function useLesson() {
    const { lesson, completedSlides, loading, completeSlide } = useLessonProgress()
    const { currentIndex, visibleSlides, showNextSlide } = useLessonNavigation(lesson?.slides)
    const { scrollToSlide } = useSlideScroll()
    const { 
      interactionState,
      showExplanation,
      hasViewedExplanation,
      handleAnswer,
      showExplanationPanel
    } = useSlideInteraction()
  
    // Compose behavior here
  
    return {
      lesson,
      currentIndex,
      visibleSlides,
      completedSlides,
      loading,
      interactionState,
      showExplanation,
      hasViewedExplanation,
      completeSlide,
      showNextSlide,
      scrollToSlide,
      handleAnswer,
      showExplanationPanel
    }
  }

================
File: use-slide-interaction.ts
================
// hooks/use-slide-interaction.ts

import { useState, useCallback } from 'react'

export function useSlideInteraction() {
    const [interactionState, setInteractionState] = useState<'viewing' | 'answering' | 'reviewing'>('viewing')
    const [showExplanation, setShowExplanation] = useState(false)
    const [hasViewedExplanation, setHasViewedExplanation] = useState(false)
  
    const handleAnswer = useCallback(() => {
      setInteractionState('reviewing')
    }, [])
  
    const showExplanationPanel = useCallback(() => {
      setShowExplanation(true)
      setHasViewedExplanation(true)
    }, [])
  
    return {
      interactionState,
      showExplanation,
      hasViewedExplanation,
      handleAnswer,
      showExplanationPanel
    }
  }

================
File: use-slide-scroll.ts
================
// hooks/use-slide-scroll.ts

import { useRef,useCallback } from "react"

export function useSlideScroll() {
    const lastScrollPosition = useRef<number>(0)
  
    const scrollToSlide = useCallback((index: number) => {
      const slides = document.querySelectorAll('.slide-item')
      const targetSlide = slides[index]
      
      if (!targetSlide) return
  
      const slideRect = targetSlide.getBoundingClientRect()
      const scrollPosition = slideRect.top + window.scrollY
  
      lastScrollPosition.current = scrollPosition
      window.scrollTo({
        top: Math.max(0, scrollPosition),
        behavior: 'smooth'
      })
    }, [])
  
    return { scrollToSlide }
  }
