This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-02-11T03:52:43.384Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
layout.tsx
model/exam-state.ts
page.tsx
types/index.ts
ui/exam-container.tsx
ui/exam-header.tsx
ui/slides/safety.tsx
ui/slides/treatment.tsx

================================================================
Files
================================================================

================
File: layout.tsx
================
'use client'

import { ReactNode } from 'react'
import { UserButton } from '@clerk/nextjs'

export default function ExamLayout({ children }: { children: ReactNode }) {
  return (
    <div className="min-h-screen bg-slate-50">
      <div className="absolute top-5 right-4 z-50">
        <UserButton />
      </div>
      {children}
    </div>
  )
}

================
File: model/exam-state.ts
================
import { create } from 'zustand'
import { devtools, persist } from 'zustand/middleware'
import { ExamAnswers, ExamStep } from '../types'

interface ExamState {
  currentStep: ExamStep
  answers: ExamAnswers
  progress: number
  setCurrentStep: (step: ExamStep) => void
  setAnswer: (step: ExamStep, questionId: string, answerId: string) => void
  isStepComplete: (step: ExamStep) => boolean
  updateProgress: () => void
}

const MOCK_QUESTIONS = {
    safety: [
      {
        id: 'q1',
        text: 'Do you have severe pain?',
        options: [
          { id: 'yes', text: 'Yes' },
          { id: 'no', text: 'No' }
        ]
      }
    ],
    treatment: [
      {
        id: 'q1',
        text: 'How often do you experience pain?',
        options: [
          { id: 'daily', text: 'Daily' },
          { id: 'weekly', text: 'Weekly' }
        ]
      }
    ]
  }

export const useExamStore = create<ExamState>()(
  devtools(
    persist(
      (set, get) => ({
        currentStep: 'safety',
        progress: 0,
        answers: {
          safety: {},
          treatment: {}
        },
        
        setCurrentStep: (step) => 
          set(
            { currentStep: step },
            false,
            'exam/setCurrentStep'
          ),
        
        setAnswer: (step, questionId, answerId) => 
          set(
            (state) => ({
              answers: {
                ...state.answers,
                [step]: {
                  ...state.answers[step],
                  [questionId]: answerId
                }
              }
            }),
            false,
            'exam/setAnswer'
          ),

        isStepComplete: (step) => {
          const { answers } = get()
          const currentAnswers = answers[step]
          return Object.keys(currentAnswers).length > 0
        },

        updateProgress: () => {
          const { answers } = get()
          const totalQuestions = MOCK_QUESTIONS.safety.length + MOCK_QUESTIONS.treatment.length
          const answeredQuestions = Object.keys(answers.safety).length + Object.keys(answers.treatment).length
          const progress = Math.round((answeredQuestions / totalQuestions) * 100)
          set({ progress }, false, 'exam/updateProgress')
        }
      }),
      {
        name: 'exam-storage'
      }
    )
  )
)

================
File: page.tsx
================
import { ExamContainer } from './ui/exam-container'
import { notFound } from 'next/navigation'

export default async function ExamPage() {
  // Later we can add data fetching here if needed, similar to getInitialContent in lessons
  try {
    return <ExamContainer />
  } catch (error) {
    console.error('Error in ExamPage:', error)
    notFound()
  }
}

================
File: types/index.ts
================
export type ExamStep = 'safety' | 'treatment';

export interface SafetyQuestion {
  id: string;
  text: string;
  subItems?: string[];
  options: {
    id: string;
    text: string;
  }[];
}

export interface TreatmentQuestion {
  id: string;
  text: string;
  options: {
    id: string;
    text: string;
  }[];
}

export interface ExamAnswers {
  safety: Record<string, string>;
  treatment: Record<string, string>;
}

================
File: ui/exam-container.tsx
================
'use client'

import { SafetySlide } from "./slides/safety"
import { TreatmentSlide } from "./slides/treatment"
import { ExamHeader } from "./exam-header"
import { useExamStore } from "../model/exam-state"
import { Button } from "@/components/ui/button"
import { ChevronRight } from "lucide-react"

// Move to config later
const MOCK_QUESTIONS = {
  safety: [
    {
      id: 'q1',
      text: 'Do you have severe pain?',
      options: [
        { id: 'yes', text: 'Yes' },
        { id: 'no', text: 'No' }
      ]
    }
  ],
  treatment: [
    {
      id: 'q1',
      text: 'How often do you experience pain?',
      options: [
        { id: 'daily', text: 'Daily' },
        { id: 'weekly', text: 'Weekly' }
      ]
    }
  ]
}

export function ExamContainer() {
  const { 
    currentStep, 
    answers, 
    progress,
    setAnswer, 
    setCurrentStep,
    isStepComplete,
    updateProgress
  } = useExamStore()

  const handleNext = () => {
    if (currentStep === 'safety' && isStepComplete('safety')) {
      updateProgress() // Only update progress when continuing
      setCurrentStep('treatment')
    }
  }

  return (
    <div className="min-h-[100dvh] flex flex-col">
      <ExamHeader progress={progress} />

      <main className="flex-1 overflow-y-auto px-4 pb-20 pt-4">
        <div className="max-w-2xl mx-auto space-y-6">
          {currentStep === 'safety' && (
            <SafetySlide
              questions={MOCK_QUESTIONS.safety}
              answers={answers.safety}
              onAnswer={(qId, aId) => setAnswer('safety', qId, aId)}
            />
          )}

          {currentStep === 'treatment' && (
            <TreatmentSlide
              questions={MOCK_QUESTIONS.treatment}
              answers={answers.treatment}
              onAnswer={(qId, aId) => setAnswer('treatment', qId, aId)}
            />
          )}
        </div>
      </main>

      <div className="fixed bottom-0 left-0 right-0 p-4 bg-white border-t">
        <div className="max-w-2xl mx-auto">
          <Button
            onClick={handleNext}
            disabled={!isStepComplete(currentStep)}
            className="w-full h-12 text-lg"
          >
            Continue
            <ChevronRight className="ml-2 h-5 w-5" />
          </Button>
        </div>
      </div>
    </div>
  )
}

================
File: ui/exam-header.tsx
================
'use client'

import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { ArrowLeft } from 'lucide-react'
import { useRouter } from 'next/navigation'

interface ExamHeaderProps {
  progress: number
}

export function ExamHeader({ progress }: ExamHeaderProps) {
  const router = useRouter()

  return (
    <header className="sticky top-0 z-50 bg-white border-b">
      <div className="flex items-center justify-between px-4 py-3">
        <Button 
          variant="ghost" 
          size="icon" 
          className="text-gray-600"
          onClick={() => router.back()}
        >
          <ArrowLeft className="h-5 w-5" />
        </Button>

        <div className="flex-1 mx-4">
          <Progress value={progress} className="h-2" />
        </div>

        <div className="font-semibold">
          {progress}%
        </div>
      </div>
    </header>
  )
}

================
File: ui/slides/safety.tsx
================
'use client'

import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { SafetyQuestion } from "../../types"
import { Shield } from "lucide-react"

interface SafetySlideProps {
  questions: SafetyQuestion[]
  answers: Record<string, string>
  onAnswer: (questionId: string, answerId: string) => void
}

export function SafetySlide({ questions, answers, onAnswer }: SafetySlideProps) {
  return (
    <Card className="p-6 space-y-6">
      <div className="flex items-center space-x-4">
        <Shield className="h-8 w-8 text-primary" />
        <div>
          <h2 className="text-2xl font-bold">Safety Screening</h2>
          <p className="text-muted-foreground">
            Please answer these safety questions before proceeding.
          </p>
        </div>
      </div>

      <div className="space-y-4">
        {questions.map((question) => (
          <div key={question.id} className="space-y-2">
            <p className="font-medium">{question.text}</p>
            
            {question.subItems && (
              <ul className="ml-4 space-y-1 text-sm text-muted-foreground">
                {question.subItems.map((item, i) => (
                  <li key={i}>{item}</li>
                ))}
              </ul>
            )}

            <div className="flex gap-2">
              {question.options.map((option) => (
                <Button
                  key={option.id}
                  variant={answers[question.id] === option.id ? "default" : "outline"}
                  onClick={() => onAnswer(question.id, option.id)}
                >
                  {option.text}
                </Button>
              ))}
            </div>
          </div>
        ))}
      </div>
    </Card>
  )
}

================
File: ui/slides/treatment.tsx
================
'use client'

import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { TreatmentQuestion } from "../../types"
import { Clipboard } from "lucide-react"

interface TreatmentSlideProps {
  questions: TreatmentQuestion[]
  answers: Record<string, string>
  onAnswer: (questionId: string, answerId: string) => void
}

export function TreatmentSlide({ questions, answers, onAnswer }: TreatmentSlideProps) {
  return (
    <Card className="p-6 space-y-6">
      <div className="flex items-center space-x-4">
        <Clipboard className="h-8 w-8 text-primary" />
        <div>
          <h2 className="text-2xl font-bold">Treatment Assessment</h2>
          <p className="text-muted-foreground">
            Please answer these questions about your symptoms.
          </p>
        </div>
      </div>

      <div className="space-y-4">
        {questions.map((question) => (
          <div key={question.id} className="space-y-2">
            <p className="font-medium">{question.text}</p>
            
            <div className="flex gap-2">
              {question.options.map((option) => (
                <Button
                  key={option.id}
                  variant={answers[question.id] === option.id ? "default" : "outline"}
                  onClick={() => onAnswer(question.id, option.id)}
                >
                  {option.text}
                </Button>
              ))}
            </div>
          </div>
        ))}
      </div>
    </Card>
  )
}



================================================================
End of Codebase
================================================================
